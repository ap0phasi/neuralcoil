x.p[x.p<(lowlim)]<<-lowlim
if (!is.null(setrots)){
rdim=dim(CoilVals)[1]
rot.indx<-((rdim*2+1):(rdim*2+3))
x.p[,rot.indx]<<-t(matrix(setrots,ncol=dim(x.p)[1],nrow=3))
}
x.p<<-x.p
best_p<<-best_p
best_p_res<<-best_p_res
}
for (itt in 1:200){
# if (itt<20){
#   slseq=c(1:5,16:20)
# }else if (itt<50){
#   slseq=c(1:15,31:45)
# }else{
#   slseq=1:length(out_goal)
# }
slseq=sel.window
step_swarm_full(n.part,L,setrots=c(2,5,5))
#plot(x.p[,1:2])
print(itt)
}
best_weights=best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),]
}else{
best_weights=readRDS("../results/stock_best_weights_12.RdA")
}
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
#Prenorm[,5:6]=Prenorm[,5:6]/rowSums(Prenorm[,5:6])
matplot(Prenorm[,1:2],type="l",lwd=2)
matlines(training_dat)
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
#modeled_change=probflow[sel.window,1]*mval-probflow[sel.window,2]*mval
plot(modeled_change,type="l")
lines(df.perc.change$change[sel.window],col="blue")
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=120
sel.window=1:120
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=30
sel.window=1:30
for (icha in seq(-1,1,length.out=20)){
coil_out=pop_coil_full(best_weights+icha*1e-6)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
}
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(jsonlite)
library(xml2)
library(quantmod)
library(neuralcoil)
symbol_list="SPY"
for (symbol in symbol_list){
if (file.exists("../data/SPYdata.csv")){
df.dat.daily=read.csv("../data/SPYdata.csv")
df.perc.change=data.frame(time=df.dat.daily$time[-1],change=diff(df.dat.daily[,5])/df.dat.daily[-dim(df.dat.daily)[1],5]*100)
}else{
check=tryCatch(quantmod::getSymbols(symbol),error=function(e) NA)
df.dat.daily=get(symbol)
df.dat.daily=data.frame(time=as.POSIXct(paste(index(df.dat.daily),"00:00"),tz="EST"),df.dat.daily[,-dim(df.dat.daily)[2]])
df.perc.change=data.frame(time=df.dat.daily$time[-1],change=diff(df.dat.daily[,5])/df.dat.daily[-dim(df.dat.daily)[1],5]*100)
}
}
mval=max(abs(df.perc.change$change))
#Every change = a*mval-b*mval where a+b=1, so change= a*mval-(1-a)*mval = 2*a*mval-mval, so a = (change+mval)/2/mval
avals=(df.perc.change$change+mval)/2/mval
probflow=data.frame(a=avals,b=1-avals)
#plot(apply(probflow,1,function(x)sum(x*c(mval,-mval))),df.perc.change$change)
sel.window=1:30
training_dat=probflow[sel.window,]
out_goal=unlist(training_dat)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=n.s/2 #Number of conserved subgroups
vfara_inert=1 #inertia
vfara_init=1 #initial inertia
Tlen=dim(training_dat)[1]
L=dim(CoilVals)[1]*2+3+n.s*2
# rotvals=runif(3,0,1000)
# startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
# RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
#
# coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
# Pmat=coil_out[[1]]
# complex_states=coil_out[[2]]
optf<-function(outs,out_goal,slseq){
outtemp=cbind(outs[1:Tlen],outs[(Tlen+1):(Tlen*2)])
outtemp=outtemp/rowSums(outtemp)
outs=array(outtemp)
mean(abs(outs[slseq]-out_goal[slseq]))
}
retrain=T
loadprev=F
if (retrain){
#Particle Swarm Optimizer
n.part=200#number of particles
w=0.2 #velocity factor
g_p=0.4#position influence factor
g_g=0.4#swarm influence factor
initialize_swarm_full(n.part,L,setrots=c(2,5,5),locfac = 0.3)
if (loadprev){
x.p[1,] = readRDS("../results/stock_best_weights_12.RdA")
}
step_swarm_full<-function(swarm_size,L,w=0.9,g_p=0.4,g_g=0.4,setrots=NULL){
old_perf=apply(outmat,1,function(x)optf(x,out_goal,slseq))
#plot(old_perf)
print(min(old_perf))
solvedcoil=apply(x.p,1,function(x)pop_coil_full(x)[[1]])
outmat<<-t(solvedcoil)
outmat[is.na(outmat)]<<-0
outmat[abs(outmat)==Inf]<<-0
n_v=matrix(runif(swarm_size*L,-1e-4,1e-4),nrow=swarm_size,ncol=L)
#n_v=matrix(rnorm(swarm_size*L,0,1e-2),nrow=swarm_size,ncol=L)
r_p=matrix(runif(swarm_size*L,0,1),nrow=swarm_size,ncol=L)
r_g=matrix(runif(swarm_size*L,0,1),nrow=swarm_size,ncol=L)
cmat=t(apply(x.p,1,function(z) order(apply(x.p,1,function(y) sum(abs(y-z))))[-1][1:locality]))
best_g_mat<<-t(apply(cmat,1,function(a) x.p[a,][which.min(apply(outmat[a,],1,function(x)optf(x,out_goal,slseq))),]))
new.ind=which(apply(outmat,1,function(x)optf(x,out_goal,slseq))<apply(best_p_res,1,function(x)optf(x,out_goal,slseq)))
best_p[new.ind,]<<-x.p[new.ind,]
best_p_res[new.ind,]<<-outmat[new.ind,]
vel<<-n_v+w*vel+g_p*r_p*(best_p-x.p)+g_g*r_g*(best_g_mat-x.p)
x.p<<-x.p+vel
x.p[x.p<(lowlim)]<<-lowlim
if (!is.null(setrots)){
rdim=dim(CoilVals)[1]
rot.indx<-((rdim*2+1):(rdim*2+3))
x.p[,rot.indx]<<-t(matrix(setrots,ncol=dim(x.p)[1],nrow=3))
}
x.p<<-x.p
best_p<<-best_p
best_p_res<<-best_p_res
}
for (itt in 1:200){
# if (itt<20){
#   slseq=c(1:5,16:20)
# }else if (itt<50){
#   slseq=c(1:15,31:45)
# }else{
#   slseq=1:length(out_goal)
# }
slseq=sel.window
step_swarm_full(n.part,L,setrots=c(2,5,5))
#plot(x.p[,1:2])
print(itt)
}
best_weights=best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),]
}else{
best_weights=readRDS("../results/stock_best_weights_12.RdA")
}
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
#Prenorm[,5:6]=Prenorm[,5:6]/rowSums(Prenorm[,5:6])
matplot(Prenorm[,1:2],type="l",lwd=2)
matlines(training_dat)
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
#modeled_change=probflow[sel.window,1]*mval-probflow[sel.window,2]*mval
plot(modeled_change,type="l")
lines(df.perc.change$change[sel.window],col="blue")
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=120
sel.window=1:120
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=30
sel.window=1:30
for (icha in seq(-1,1,length.out=20)){
coil_out=pop_coil_full(best_weights+icha*1e-6)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
}
for (itt in 1:200){
# if (itt<20){
#   slseq=c(1:5,16:20)
# }else if (itt<50){
#   slseq=c(1:15,31:45)
# }else{
#   slseq=1:length(out_goal)
# }
slseq=sel.window
step_swarm_full(n.part,L,setrots=c(2,5,5))
#plot(x.p[,1:2])
print(itt)
}
best_weights=best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),]
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
#Prenorm[,5:6]=Prenorm[,5:6]/rowSums(Prenorm[,5:6])
matplot(Prenorm[,1:2],type="l",lwd=2)
matlines(training_dat)
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
#modeled_change=probflow[sel.window,1]*mval-probflow[sel.window,2]*mval
plot(modeled_change,type="l")
lines(df.perc.change$change[sel.window],col="blue")
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=120
sel.window=1:120
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=30
sel.window=1:30
for (icha in seq(-1,1,length.out=20)){
coil_out=pop_coil_full(best_weights+icha*1e-6)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
}
for (itt in 1:200){
# if (itt<20){
#   slseq=c(1:5,16:20)
# }else if (itt<50){
#   slseq=c(1:15,31:45)
# }else{
#   slseq=1:length(out_goal)
# }
slseq=sel.window
step_swarm_full(n.part,L,setrots=c(2,5,5))
#plot(x.p[,1:2])
print(itt)
}
best_weights=best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),]
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
#Prenorm[,5:6]=Prenorm[,5:6]/rowSums(Prenorm[,5:6])
matplot(Prenorm[,1:2],type="l",lwd=2)
matlines(training_dat)
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
#modeled_change=probflow[sel.window,1]*mval-probflow[sel.window,2]*mval
plot(modeled_change,type="l")
lines(df.perc.change$change[sel.window],col="blue")
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=120
sel.window=1:120
coil_out=pop_coil_full(best_weights)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
Tlen=30
sel.window=1:30
for (icha in seq(-1,1,length.out=20)){
coil_out=pop_coil_full(best_weights+icha*1e-6)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
Prenorm=Pmat
Prenorm[,1:2]=Prenorm[,1:2]/rowSums(Prenorm[,1:2])
Prenorm[,3:4]=Prenorm[,3:4]/rowSums(Prenorm[,3:4])
modeled_change=Prenorm[,1]*mval-Prenorm[,2]*mval
predicted_price=df.dat.daily$SPY.Close[sel.window[1]]
for (ipp in 1:length(modeled_change)){
predicted_price=c(predicted_price,predicted_price[ipp]*(1+modeled_change[ipp]/100))
}
obsvals=df.dat.daily$SPY.Close[sel.window]
plot(obsvals,type="l",col="blue",ylim=c(min(min(obsvals),min(predicted_price)),max(c(obsvals,predicted_price))))
lines(predicted_price,type="l")
}
saveRDS(best_weights,file="results/stock_best_weights_13.RdA")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(jsonlite)
library(xml2)
library(quantmod)
library(neuralcoil)
symbol_list="SPY"
for (symbol in symbol_list){
if (file.exists("../data/SPYdata.csv")){
df.dat.daily=read.csv("../data/SPYdata.csv")
df.perc.change=data.frame(time=df.dat.daily$time[-1],change=diff(df.dat.daily[,5])/df.dat.daily[-dim(df.dat.daily)[1],5]*100)
}else{
check=tryCatch(quantmod::getSymbols(symbol),error=function(e) NA)
df.dat.daily=get(symbol)
df.dat.daily=data.frame(time=as.POSIXct(paste(index(df.dat.daily),"00:00"),tz="EST"),df.dat.daily[,-dim(df.dat.daily)[2]])
df.perc.change=data.frame(time=df.dat.daily$time[-1],change=diff(df.dat.daily[,5])/df.dat.daily[-dim(df.dat.daily)[1],5]*100)
}
}
mval=max(abs(df.perc.change$change))
#Every change = a*mval-b*mval where a+b=1, so change= a*mval-(1-a)*mval = 2*a*mval-mval, so a = (change+mval)/2/mval
avals=(df.perc.change$change+mval)/2/mval
probflow=data.frame(a=avals,b=1-avals)
#plot(apply(probflow,1,function(x)sum(x*c(mval,-mval))),df.perc.change$change)
sel.window=1:30
training_dat=probflow[sel.window,]
out_goal=unlist(training_dat)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=n.s/2 #Number of conserved subgroups
vfara_inert=1 #inertia
vfara_init=1 #initial inertia
Tlen=dim(training_dat)[1]
L=dim(CoilVals)[1]*2+3+n.s*2
# rotvals=runif(3,0,1000)
# startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
# RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
#
# coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
# Pmat=coil_out[[1]]
# complex_states=coil_out[[2]]
optf<-function(outs,out_goal,slseq){
outtemp=cbind(outs[1:Tlen],outs[(Tlen+1):(Tlen*2)])
outtemp=outtemp/rowSums(outtemp)
outs=array(outtemp)
mean(abs(outs[slseq]-out_goal[slseq]))
}
retrain=T
loadprev=F
if (retrain){
#Particle Swarm Optimizer
n.part=200#number of particles
w=0.2 #velocity factor
g_p=0.4#position influence factor
g_g=0.4#swarm influence factor
initialize_swarm_full(n.part,L,setrots=c(2,5,5),locfac = 0.3)
if (loadprev){
x.p[1,] = readRDS("../results/stock_best_weights_12.RdA")
}
step_swarm_full<-function(swarm_size,L,w=0.9,g_p=0.4,g_g=0.4,setrots=NULL){
old_perf=apply(outmat,1,function(x)optf(x,out_goal,slseq))
#plot(old_perf)
print(min(old_perf))
solvedcoil=apply(x.p,1,function(x)pop_coil_full(x)[[1]])
outmat<<-t(solvedcoil)
outmat[is.na(outmat)]<<-0
outmat[abs(outmat)==Inf]<<-0
n_v=matrix(runif(swarm_size*L,-1e-4,1e-4),nrow=swarm_size,ncol=L)
#n_v=matrix(rnorm(swarm_size*L,0,1e-2),nrow=swarm_size,ncol=L)
r_p=matrix(runif(swarm_size*L,0,1),nrow=swarm_size,ncol=L)
r_g=matrix(runif(swarm_size*L,0,1),nrow=swarm_size,ncol=L)
cmat=t(apply(x.p,1,function(z) order(apply(x.p,1,function(y) sum(abs(y-z))))[-1][1:locality]))
best_g_mat<<-t(apply(cmat,1,function(a) x.p[a,][which.min(apply(outmat[a,],1,function(x)optf(x,out_goal,slseq))),]))
new.ind=which(apply(outmat,1,function(x)optf(x,out_goal,slseq))<apply(best_p_res,1,function(x)optf(x,out_goal,slseq)))
best_p[new.ind,]<<-x.p[new.ind,]
best_p_res[new.ind,]<<-outmat[new.ind,]
vel<<-n_v+w*vel+g_p*r_p*(best_p-x.p)+g_g*r_g*(best_g_mat-x.p)
x.p<<-x.p+vel
x.p[x.p<(lowlim)]<<-lowlim
if (!is.null(setrots)){
rdim=dim(CoilVals)[1]
rot.indx<-((rdim*2+1):(rdim*2+3))
x.p[,rot.indx]<<-t(matrix(setrots,ncol=dim(x.p)[1],nrow=3))
}
x.p<<-x.p
best_p<<-best_p
best_p_res<<-best_p_res
}
for (itt in 1:200){
# if (itt<20){
#   slseq=c(1:5,16:20)
# }else if (itt<50){
#   slseq=c(1:15,31:45)
# }else{
#   slseq=1:length(out_goal)
# }
slseq=sel.window
step_swarm_full(n.part,L,setrots=c(2,5,5))
#plot(x.p[,1:2])
print(itt)
}
best_weights=best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),]
}else{
best_weights=readRDS("../results/stock_best_weights_12.RdA")
}
coil_out=pop_coil_full(best_weights)
devtools::install()
library(neuralcoil)
neuralcoil::step_swarm_full
devtools::document()
shiny::runApp('~/GitHub/weaverchat')
shiny::runApp('~/GitHub/weaverchat')
runApp('~/GitHub/weaverchat')
library(RCurl)
library(jsonlite)
library(xml2)
library(quantmod)
library(neuralcoil)
trace(step_swam_full)
trace(step_swarm_full)
trace(step_swarm_full,edit=T)
source("~/GitHub/neuralcoil/tests/stocktestsloop.R")
trace(step_swarm_full,edit=T)
trace(step_swarm_full,edit=T)
library(neuralcoil)
trace(step_swarm_full,edit=T)
source("~/GitHub/neuralcoil/tests/stocktestsloop.R")
trace(step_swarm_full,edit=T)
source("~/GitHub/neuralcoil/tests/stocktestsloop.R")
