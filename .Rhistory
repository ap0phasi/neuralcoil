source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
saveRDS(file="results/ballinbox_weights2.RdA",best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights2.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights2.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
save
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
savedweights
readRDS("results/buoy_single.RdA")
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/.active-rstudio-document')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
saveRDS(file="results/buoy_single4.RdA",unlist(get_weights(model)))
assign_weights(weights,weightdim,bestp[which.min(bestgs),])
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
saveRDS(file="results/buoy_single4.RdA",unlist(get_weights(model)))
bestp[which.min(bestgs),]
unlist(get_weights(model))
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
saveRDS(file="results/buoy_single4.RdA",unlist(get_weights(model)))
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
saveRDS(file="results/buoy_opt3.RdA",unlist(get_weights(model)))
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
model %>%compile(loss=loss_focus,optimizer="adam")
history<-model%>%fit(
nn_inputs,
nn_obj,
epochs=800,
batch_size=1
)
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
model %>%compile(loss=loss_focus,optimizer="adam")
history<-model%>%fit(
nn_inputs,
nn_obj,
epochs=800,
batch_size=1
)
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
model %>%compile(loss=loss_focus,optimizer="adam")
history<-model%>%fit(
nn_inputs,
nn_obj,
epochs=800,
batch_size=1
)
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
model %>%compile(loss=loss_focus,optimizer="adam")
history<-model%>%fit(
nn_inputs,
nn_obj,
epochs=800,
batch_size=1
)
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
saveRDS(file="results/buoy_opt4.RdA",unlist(get_weights(model)))
source('~/.active-rstudio-document')
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy.R')
model<-autogen_cnn(dfs,n.s,dim(CoilVals)[1])
#Train Neural Network to produce these outputs
nn_inputs=sapply(1:length(inputlist[[1]]),function(g) do.call(rbind,lapply(inputlist,function(x)x[[g]])))
RandMat=t(matrix(rep(array(t(matrix(c(Re(RandVec),Im(RandVec)),ncol=2))),length(xsamps)),ncol=length(xsamps)))
nn_obj=cbind(rots,stvals,RandMat)
loss_focus<-function(y_true,y_pred){
importance_vector=rep(1,(n.s*2+3))
importance_vector[4:(n.s*2+3)]=100000
k_mean((y_true[,1:(n.s*2+3)]-y_pred[,1:(n.s*2+3)])^2*importance_vector)
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
model %>%compile(loss=loss_focus,optimizer="adam")
history<-model%>%fit(
nn_inputs,
nn_obj,
epochs=800,
batch_size=1
)
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
nnn_obj
nn_obj
model<-autogen_cnn(dfs,n.s,dim(CoilVals)[1])
nn_obj[,1:3]=nn_obj[,1:3]/100
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
model %>%compile(loss=loss_focus,optimizer="adam")
history<-model%>%fit(
nn_inputs,
nn_obj,
epochs=800,
batch_size=1
)
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
nn_obj
nn_obj[,1:13]
model %>%compile(loss="mean_squared_error",optimizer="adam")
source('~/GitHub/neuralcoil/tests/fullstack_pso_buoy_experiment1.R')
outsave=c()
par(mfrow=c(length(inputlist),1),mar=c(0,4,0,0))
for (iii in 1:length(inputlist)){
inputs=inputlist[[iii]]
coil_out=pop_coil(inputs,readout = T)
plot(outputs[iii,],col="blue",type="l")
print(coil_out[[1]][1,1])
matlines(coil_out[[1]],col="grey")
lines(coil_out[[1]][,1],col="red")
outsave=rbind(outsave,coil_out[[1]][,1])
}
par(mfrow=c(1,1),mar=c(4,4,4,4))
plot(df[[objective]][-(1:lookback)],type="l",lwd=1.5)
for (ix in 1:length(xsamps)){
invres=invertscaling(outsave[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
invobs=invertscaling(outputs[ix,],scalesaves[dim(scalesaves)[1],],scaleran)
lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invres,col="red",lwd=2)
#=lines(xsamps[ix]:(xsamps[ix]+lookforward-1),invobs,col="blue")
}
print(paste("Difference:",sum((model%>%predict(nn_inputs))[1,]-nn_obj[1,])))
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights2.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights2.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
plot(Pmat[,1],Pmat[,2])
plot(Pmat[,1],Pmat[,2],type="l")
aa=readRDS("results/ballinbox_weights2.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
dim(Pmat)
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(Pmat[,iP])
lines(exampledata_ballinbox[,iP])
}
par(mfrow = c(1,1))
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
apply(best_p_res,1,function(x)optf(x,out_goal,slseq)))
apply(best_p_res,1,function(x)optf(x,out_goal,slseq))
min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq)))
itt
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
slseq
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
par(mfrow = c(1,1))
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights2.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
par(mfrow = c(1,1))
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
par(mfrow = c(1,1))
saveRDS(file="results/ballinbox_weights3.RdA",best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])
aa=readRDS("results/ballinbox_weights3.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
#Demonstrate Chaos
# bb=aa
# bb[(rdim*2+1):(rdim*2+3)]=c(2,5.001,5)
# matplot(pop_coil_full(bb)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
# matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
par(mfrow = c(1,1))
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
par(mfrow = c(1,1))
aa=readRDS("results/ballinbox_weights3.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
bb=aa
bb[(rdim*2+1):(rdim*2+3)]=c(2,5.001,5)
matplot(pop_coil_full(bb)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
bb=aa
bb[(rdim*2+1):(rdim*2+3)]=c(2,5.001,5)
matplot(pop_coil_full(bb)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
bb[(rdim*2+1):(rdim*2+3)]=c(2,5.0001,5)
matplot(pop_coil_full(bb)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
bb[(rdim*2+1):(rdim*2+3)]=c(2,5.00001,5)
matplot(pop_coil_full(bb)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
saveRDS(file="results/ballinbox_weights4.RdA",best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq)))
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq)))
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
source("~/GitHub/neuralcoil/tests/coil_fit_ballinbox_examplefinal.R")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights3.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
#Demonstrate Chaos
# bb=aa
# bb[(rdim*2+1):(rdim*2+3)]=c(2,5.00001,5)
# matplot(pop_coil_full(bb)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
# matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
par(mfrow = c(2, 2))
for (iP in 1:dim(Pmat)[2]){
plot(exampledata_ballinbox[,iP],type="l")
lines(Pmat[,iP],lty=2)
}
par(mfrow = c(1,1))
#saveRDS(file="results/ballinbox_weights4.RdA",best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])
devtools::use_vignette("introduction")
usethat::use_vignette("introduction")
install.packages('usethat')
usethat::use_vignette("introduction")
installed.packages("usethis")
usethis::use_vignette("introduction")
install.packages("gifski")
source("~/Coils/models/coil_complex_flex_test.R")
source("~/Coils/models/coil_complex_flex_test.R")
source("~/Coils/models/coil_complex_flex_test.R")
