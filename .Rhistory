matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matplot(pop_coil_full(newweights)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
optf
source('~/GitHub/neuralcoil/tests/archive2/coil_learn_ballinbox.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
outmat
apply(outmat,1,function(x)optf(x,out_goal,slseq))
optf
outmat
outmat[27,]
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
plot(x.p[,c(1,2)])
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
runcoil
lrad
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
saveRDS("results/ballinbox_weights.RdA",best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])
saveRDS(file="results/ballinbox_weights.RdA",best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])
setrots=c(,2,5,5)
setrots=c(2,5,5)
setrots
matrix(setrots,nrow=dim(x.p))
matrix(setrots,nrow=dim(x.p),ncol=3)
matrix(setrots,ncol=dim(x.p),nrow=3)
matrix(rep(setrots,dim(x.p)[1]))
matrix(rep(setrots,dim(x.p)[1]),ncol=3)
matrix(setrots,ncol=dim(x.p)[1],nrow=3)
t(matrix(setrots,ncol=dim(x.p)[1],nrow=3))
devtools::document()
devtools::document()
devtools::install()
?runcoil
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
devtools::install()
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
Pmat=pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]]
matplot(pop_coil_full(best_p[which.min(apply(best_p_res,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
#matplot(pop_coil_full(x.p[which.min(apply(outmat,1,function(x)optf(x,out_goal,slseq))),])[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
?step_swarm_full
rm(list=ls())
?step_swarm_full
neuralcoil::step_swarm_full()
?neuralcoil::step_swarm_full()
devtools::install()
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
readRDS("results/best_weights2.RdA")
readRDS("results/ballinbox_weights.RdA")
matplot(pop_coil_full(readRDS("results/ballinbox_weights.RdA"))[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
matplot(pop_coil_full(readRDS("results/ballinbox_weights.RdA"))[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
aa[c(1:3)]=c(200,500,500)
matplot(pop_coil_full()[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
aa[c(1:3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
aa=readRDS("results/ballinbox_weights.RdA")
aa[c(1:3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
avec[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
rdim
rot.indx<-((rdim*2+1):(rdim*2+3))
rot.indx
rdim
devtools::install()
?neuralcoil::step_swarm_full
neuralcoil::step_swarm_full
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
(rdim*2+1):(rdim*2+3)
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
rotvals=c(200,500,500)
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals,prival="lre")
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
rotvals=c(200,500,500)
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
lrad
lrad <- function(bb){(Re(bb))}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals,prival="lre")
}
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full()
pop_coil_full
lre
lrad
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(200,500,500)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
rotvals=c(200,500,500)
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
rotvals=c(200,500,500)
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals,prival="lre")
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
rotvals=c(200,500,500)
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
#rotvals=c(200,500,500)
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
lrad
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
pop_coil_full<-function(avec){
rdim=dim(CoilVals)[1]
RandVec=complex(rdim,avec[1:(rdim)],avec[(rdim+1):(rdim*2)])
rotvals=avec[(rdim*2+1):(rdim*2+3)]*100
stmat=matrix(avec[(rdim*2+4):length(avec)],nrow=2)
startvals=complex(n.s,stmat[1,],stmat[2,])
runcoil(RandVec,rotvals,startvals)
}
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
lrad
lre
devtools::document()
devtools::install()
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
#'
#' This functions runs the generated coil provided the parameterizations
#'
#' @param RandVec complex valued array of coil parameters
#' @param rotvals three real values giving coil rotations
#' @param startvals complex valued array giving coil starting values
#' @param prival what prioritization function to use?
#' @return real-valued probability dynamics over time
#' @return complex-valued coil dynamics
#' @export
runcoil=function(RandVec,rotvals,startvals,prival=NULL){
print(prival)
if (is.null(prival)){
lpri=lrad
}else{
lpri=lre
}
#build symmetric or asymmetric coils
for (igc in 1:length(group.index)){
CoilVals$Value[group.index[[igc]]]=RandVec[igc]
}
CoilVals$Value[1:n.s]=startvals
#Apply physics-based controls on coil parameterization
if (cont==T){
#Force Locality
ExG=(expand.grid(c(1:length(name.states)),c(1:length(name.states))))
Exgs=ExG[abs(ExG[[1]]-ExG[[2]])>1,]
#Prevent exchange between subnormals
#Subnormalization
splits=split((1:length(name.states)), ceiling((1:length(name.states))/(length(name.states)/sub.num)))
subvas=which(diff(ceiling((1:length(name.states))/(length(name.states)/sub.num)))>0)
sbins=rbind(cbind(subvas,subvas+1),cbind(subvas+1,subvas))
colnames(sbins)=colnames(Exgs)
if (loc==T){
Exgs=rbind(Exgs,sbins) #For Locality
}else{
Exgs=rbind(as.matrix(expand.grid(splits)),as.matrix(expand.grid(splits)[,sub.num:1])) #No Locality, segmented
}
Pset=split(t(Exgs), rep(1:nrow(Exgs), each = ncol(Exgs)))
for (ipps in Pset){
#Cross Influence, conservative, nonentropic, no impossibles
sw.indx=grepl(paste(name.states[ipps[1]],name.states[ipps[2]],sep="[-]"),CoilVals$Name)
CoilVals[sw.indx,2]=complex(sum(sw.indx),1e-9,1e-9)
}
#Inertial Values
for (iSSa in 1:length(name.states)){
sw.indx=grepl(paste0(name.states[iSSa],"[-]",name.states[iSSa],"[|]"),CoilVals$Name)
CoilVals$Value[sw.indx]=CoilVals$Value[sw.indx]*vfara_inert
}
#Starting Inertial Values
for (iSSa in 1:length(name.states)){
sw.indx=grepl(paste0("^",name.states[iSSa],"[-]",name.states[iSSa],"$"),CoilVals$Name)
CoilVals$Value[sw.indx]=CoilVals$Value[sw.indx]*vfara_init
}
#Inertial perception
etemp=expand.grid(c(1:length(name.states)),c(1:length(name.states)))
etemp=etemp[!(etemp[,1]==etemp[,2]),]
Exk=split(t(etemp), rep(1:(length(name.states)-1), each = 2))
mfac=0
for (iske in Exk){
Eindx1=grepl(paste0(name.states[iske[1]],"[-]",name.states[iske[2]],"[|]",name.states[iske[2]],"[-]",name.states[iske[1]]),CoilVals$Name)
CoilVals$Value[Eindx1]=CoilVals$Value[Eindx1]*mfac
Eindx2=grepl(paste0(name.states[iske[2]],"[-]",name.states[iske[1]],"[|]",name.states[iske[1]],"[-]",name.states[iske[2]]),CoilVals$Name)
CoilVals$Value[Eindx2]=CoilVals$Value[Eindx2]*mfac
}
}
#Normalize based off of saved norm groups
for (iNo in 1:dim(Normsaves)[1]){
if (max(Normsaves[iNo,])<=n.s){
GoalR<-Re(exp(rotvals[1]*complex(1,0,1)))
Goali<-Im(exp(rotvals[1]*complex(1,0,1)))
}else if ((max(Normsaves[iNo,])<=(n.s^2+n.s))&(min(Normsaves[iNo,])>(n.s))){
GoalR<-Re(exp(rotvals[2]*complex(1,0,1)))
Goali<-Im(exp(rotvals[2]*complex(1,0,1)))
}else{
GoalR<-Re(exp(rotvals[3]*complex(1,0,1)))
Goali<-Im(exp(rotvals[3]*complex(1,0,1)))
}
CoilVals$Value[Normsaves[iNo,]]=normalize(CoilVals$Value[Normsaves[iNo,]],GoalR,Goali)
}
#Save initial probability matrix
Pmat=llen(CoilVals$Value[match(name.states,CoilVals$Name)])
complex_states=CoilVals$Value[match(name.states,CoilVals$Name)]
for (iT in 1:(Tlen-1)){
#We need to select our predictive group. Find maximum state:
max.state=name.states[which.max(lpri(CoilVals$Value[match(name.states,CoilVals$Name)]))]
min.state=name.states[which.min(lpri(CoilVals$Value[match(name.states,CoilVals$Name)]))]
#Now look at the predictions for transition of max state to min state according to different groups
preds=c()
for (iG in conserved.group){
g.tran=paste(paste0(min.state,"-",max.state),iG,sep="|")
preds=c(preds,sum(CoilVals$Value[match(g.tran,CoilVals$Name)]*CoilVals$Value[match(iG,CoilVals$Name)]))
}
#Pick whichever maximizes
group.sel=which.max(lpri(preds))
if (length(group.sel)==0){group.sel=1}
sel.v=paste0("[|]",conserved.group[[group.sel]],"$")
TMat=c()
for (iS in sel.v){
TMat=cbind(TMat,CoilVals[grep(iS,CoilVals$Name),]$Value)
}
#Create transition matrix values based on selected predictive group
CoilVals$Value[match(trans.names,CoilVals$Name)]=TMat%*%CoilVals$Value[match(conserved.group[[group.sel]],CoilVals$Name)]
SMat=c()
for (iS in name.states){
SMat=cbind(SMat,CoilVals[grep(paste0("^[a-z]-",iS,"$"),CoilVals$Name),]$Value)
}
SMat=apply(SMat,2,function(comvec)comvec/sum(llen(comvec))) #To handle leaks due to rounding?
#Produce new probabilities
CoilVals$Value[match(name.states,CoilVals$Name)]=SMat%*%CoilVals$Value[match(name.states,CoilVals$Name)]
#Convert complex values to real
Pmat=rbind(Pmat,llen(CoilVals$Value[match(name.states,CoilVals$Name)]))
complex_states=rbind(complex_states,CoilVals$Value[match(name.states,CoilVals$Name)])
}
return(list(Pmat,complex_states))
}
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
devtools::install()
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
devtools::install()
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
aa=readRDS("results/ballinbox_weights.RdA")
rdim=dim(CoilVals)[1]
aa[(rdim*2+1):(rdim*2+3)]=c(2,5,5)
matplot(pop_coil_full(aa)[[1]],pch=1,type="l",xlim=c(0,(Tlen)),lwd=2,ylim=c(0,1),xlab="Time",ylab="P(s)")
matlines(exampledata_ballinbox,pch=1,type="l",xlim=c(0,(Tlen)),xlab="Time",ylab="P(s)")
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
source('~/GitHub/neuralcoil/tests/coil_fit_ballinbox_example3.R')
plot(x.p[,c(1,2)])
source('~/GitHub/neuralcoil/tests/archive2/fullstack_pso_buoy_points.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
