dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=2 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=2 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=2 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=2 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=2 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=20 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=20 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=20 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=20 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
library(neuralcoil)
library(gifski)
library(kableExtra)
n.s=4
sym=F   #Parameter Symmetry
buildcoil(n.s,sym=sym) #Rebuild coil in case symmetry changed
loc=F #Locality
cont=T #Parameter Physicality Controls
sub.num=1 #Number of conserved subgroups
vfara_inert=20 #inertia
vfara_init=1 #initial inertia
CoilVals %>% kable %>% kable_styling("striped", full_width = F) %>%scroll_box(height='250px')
rotvals=runif(3,0,1000)
startvals=complex(length(n.s),runif(n.s,0,1),runif(n.s,0,1))
RandVec=complex(length(group.index),runif(length(group.index),0,1),runif(length(group.index),0,1))
Tlen=60
coil_out=runcoil(RandVec = RandVec,rotvals = rotvals,startvals=startvals)
Pmat=coil_out[[1]]
complex_states=coil_out[[2]]
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dchange=(apply(Pmat,1,function(x)sum(x*c(-0.5,-0.25,0.25,0.5))))
plot(cumsum(dchange),xlab="Time",ylab="Signal",type="l")
P.df<-as.data.frame(Pmat)
colnames(P.df)=gsub("V","S",colnames(P.df))
#Plots
layout(matrix(1:3,ncol=3), width = c(2,2,1),height = c(1,1,1))
#Plot Probability Evolution
matplot(P.df,type="l",lwd=2,xlab = "Time",ylab="Probability",main="State Probability Dynamics")
legend("topright", colnames(P.df),col=seq_len(dim(P.df)[2]),cex=0.8,fill=seq_len(dim(P.df)[2]))
#Plot Complex State Values
g.count <- Tlen
g.ramp <- gray.colors(g.count, start = 1, end = 0)
plot(complex(1,0,0),xlab="Real",ylab="Complex",main="Coil Values")
for (it in 1:Tlen){
cums=t(apply(complex_states,1,cumsum))
points(cums[it,],col=g.ramp[it])
lines(cums[it,],col=g.ramp[it])
}
par(mar=c(4,0,3,3))
legend_image <- as.raster(matrix(rev(g.ramp), ncol=1))
plot(c(0,2),c(0,Tlen),type = 'n', axes = F,xlab = '', ylab = '', main = 'Time')
text(x=1.5, y = seq(0,Tlen,l=5), labels = seq(0,Tlen,l=5))
rasterImage(legend_image, 0, 0, 1,Tlen)
par(mfrow=c(1,1))
dim(CoilVals)
Normsaves
CoilVals
CoilVals$Name[Normsaves[1]]
CoilVals$Name[Normsaves[1,]]
CoilVals$Name[Normsaves[2,]]
CoilVals$Name[Normsaves[340,]]
CoilVals$Name[Normsaves[36,]]
